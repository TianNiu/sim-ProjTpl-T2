// *************************************
//
//   Mixin,辅助宏
//
// *************************************

// ----- Font Face ----- //
// -> https://github.com/thoughtbot/bourbon/edit/master/app/assets/stylesheets/css3/_font-face.scss#
//
// $family - the font-family
// $path - the font path
// $weight - the font-weight
// $style - the font-style
// $asset-pipeline - use the Rails asset pipeline (boolean)

@mixin font-face($family, $path, $weight: normal, $style: normal, $asset-pipeline: true) {
    @font-face {
        font-family: $family;
        font-style: $style;
        font-weight: $weight;
        @if $asset-pipeline == true {
            src: font-url("#{$path}.eot");
            src: font-url("#{$path}.eot?#iefix") format("embedded-opentype"), font-url("#{$path}.woff") format("woff"), font-url("#{$path}.ttf") format("truetype"), font-url("#{$path}.svg##{$family}") format("svg");
        }
        @else {
            src: url("#{$path}.eot");
            src: url("#{$path}.eot?#iefix") format("embedded-opentype"), url("#{$path}.woff") format("woff"), url("#{$path}.ttf") format("truetype"), url("#{$path}.svg##{$family}") format("svg");
        }
    }
}

// ----- Respond-to ----- //
// -> Generates a media query
//
// $val - the breakpoint size
// $query - the type of query ('min-width', 'max-width')
// $media - the media type ('screen', 'print', etc.)
// @content - the generated content within the mixin

@mixin respond-to($val, $query: min-width, $media: screen) {
    @media #{$media} and ($query: $val) {
        @content;
    }
}

// ----- compass-singleimg-multistate ----- //
// -> compass精灵地图修改->将指定文件夹中的图标合成为一个sprite map
// 这里仅适用于一个图标的不同状态
//
// $img-folder-name : 图标文件夹名称
// $imgname : 图标名称
// $cursor : 鼠标经过鼠标样式(默认:default)
// $sprite-base-class : 精灵需要继承的基类(默认:无)
// $spacing : 精灵布局间距(默认:20px)
// $layout : 精灵布局方式(默认:水平)
@mixin compass-singleimg-multistate($img-folder-name, $imgname: "icon", $cursor: default, $G_offset-x: 0px, $G_offset-y: 0px, $sprite-base-class: false, $spacing: 20px, $layout: vertical) {
    //如果没有传入基类名(默认false)
    @if $sprite-base-class != false {
        @extend #{$sprite-base-class};
    }
    //获得map
    $icons: sprite-map($img-folder-name + "/*.png", $spacing: 20px, $layout: horizontal);
    background: sprite($icons, $imgname, $G_offset-x, $G_offset-y) no-repeat;
    &:hover {
        //如果存在hover状态的图片
        @if index(sprite-names($icons), #{$imgname + _hover}) {
            background-position: sprite-position($icons, #{$imgname + "_hover"}, $G_offset-x, $G_offset-y);
        }
        cursor: $cursor;
    }
    &.act {
        //@debug sprite-names($icons);
        //@debug "length is:" + length(sprite-names($icons));
        //@debug type-of(sprite-names($icons));
        //如果在精灵列表中存在激活(act)状态的图片
        @if index(sprite-names($icons), #{$imgname + _act}) {
            background-position: sprite-position($icons, #{$imgname + "_act"}, $G_offset-x, $G_offset-y);
        }
    }
}